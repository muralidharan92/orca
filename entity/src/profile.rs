//! SeaORM Entity. Generated by sea-orm-codegen 0.6.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};
use crate::profile_data;
use crate::profile_data::EnvironmentData;


#[derive(Clone, Debug, PartialEq, Deserialize, Serialize)]
pub struct Profile {
    pub name: String,
    pub is_default: bool
}

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Deserialize, Serialize)]
#[sea_orm(table_name = "profile")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = true)]
    pub id: i32,
    pub name: String,
    pub is_default: bool,
    #[sea_orm(ignore)]
    pub data: Vec<profile_data::Model>
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::profile_data::Entity")]
    ProfileData,
}


impl Related<super::profile_data::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ProfileData.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
